import asyncio
from textwrap import dedent
from typing import Optional, List, Any
from pathlib import Path # Import Path

from agno.agent import Agent
from agno.team import Team
from agno.tools import Function # Import Function for wrapping callables
from agno.memory.v2.memory import Memory
from agno.memory.v2.db.sqlite import SqliteMemoryDb
from agno.memory.v2.schema import UserMemory

from core.model_factory import get_model_instance, DEFAULT_MODEL_ID
# Commenting out DeepDive agent imports as it's not used in this specific test
# from agents.deep_dive_security_auditor_agent import (
#     DEEP_DIVE_SECURITY_AUDITOR_AGENT_CONFIG,
#     DEEP_DIVE_SECURITY_AUDITOR_AGENT_ID,
# )
from agno.tools.file import FileTools
from agno.tools.shell import ShellTools
from tools.report_repository_tools import save_report_to_repository, read_report_from_repository
# Import the session state tool classes
from tools.session_state_tools import ReadSessionStateTool, UpdateSessionStateTool
from tools.project_structure_tools import ListDirectoryTreeTool # Import the new tool

# Standard plan filename, consistent with SecurityAuditTeam
# PLAN_FILENAME_FOR_TEST = "AttackSurfaceInvestigationPlan_whitebox.md" # Not used in this version

# --- New Agent IDs ---
CONTEXT_SETTER_AGENT_ID = "context_setter_agent_v1"
CONTEXT_READER_AGENT_ID = "context_reader_agent_v1"
SHARED_MEMORY_FACT_TOPIC = "shared_fact"

# New Minimal Team Leader Instructions for Context Sharing Test
MINIMAL_TEAM_LEADER_INSTRUCTIONS_CONTEXT_SHARING_TEST = dedent(f'''\
You are a Test Team Leader. Your task is to test context sharing between two member agents using shared memory.

**Agent Details:**
- Context Setter Agent ID: '{CONTEXT_SETTER_AGENT_ID}'
- Context Reader Agent ID: '{CONTEXT_READER_AGENT_ID}'

**Your Tools:**
- `atransfer_task_to_member`: To delegate tasks.

**Workflow:**

**Phase 1: Set Context**
1.  You will receive an initial user query which should contain a fact to be shared. For example: "Please ask the team to remember the fact: The sky is blue."
2.  Extract this fact (e.g., "The sky is blue").
3.  Use the `atransfer_task_to_member` tool to delegate a task to the `{CONTEXT_SETTER_AGENT_ID}`.
    - `member_id`: '{CONTEXT_SETTER_AGENT_ID}'
    - `task_description`: "Please remember the following fact and associate it with the topic '{SHARED_MEMORY_FACT_TOPIC}': '[The extracted fact from user query]'."
    - `expected_output`: "Confirmation that the fact has been remembered."
4.  Await confirmation from the `{CONTEXT_SETTER_AGENT_ID}`.

**Phase 2: Read and Use Context**
1.  After confirmation from `{CONTEXT_SETTER_AGENT_ID}`, use `atransfer_task_to_member` to delegate a task to the `{CONTEXT_READER_AGENT_ID}`.
    - `member_id`: '{CONTEXT_READER_AGENT_ID}'
    - `task_description`: "Please recall the fact associated with the topic '{SHARED_MEMORY_FACT_TOPIC}' and then state: 'Based on shared context, I know that [recalled fact].'"
    - `expected_output`: "A sentence in the format: 'Based on shared context, I know that [recalled fact].'"
2.  Your final response for this entire interaction **MUST BE ONLY** the sentence generated by the `{CONTEXT_READER_AGENT_ID}`.

Strictly follow this delegation and information flow. Do not add any other commentary.
''')

class MinimalTestTeam(Team):
    def __init__(
        self,
        model_id: str = DEFAULT_MODEL_ID,
        user_id: Optional[str] = "default_user_minimal_team", # Changed for clarity
        team_id: str = "minimal_test_team_context_sharing_v1", # Changed for clarity
        name: str = "MinimalContextSharingTestTeam", # Changed for clarity
        db_path: str = "minimal_team_memory.db", # Added for shared memory
        **kwargs: Any,
    ):
        team_leader_model = get_model_instance(model_id)
        if not team_leader_model:
            raise ValueError(f"Could not get team_leader_model instance for {model_id}")

        agent_model = get_model_instance(model_id) # Use same model for new agents
        if not agent_model:
            raise ValueError(f"Could not get agent_model instance for {model_id}")

        # --- Shared Memory Setup ---
        self.db_path = db_path
        sqlite_db_backend = SqliteMemoryDb(db_file=self.db_path, table_name="minimal_team_shared_memory")
        shared_team_memory = Memory(db=sqlite_db_backend)
        # --- End Shared Memory Setup ---

        # --- ContextSetterAgent ---
        context_setter_agent = Agent(
            agent_id=CONTEXT_SETTER_AGENT_ID,
            name="ContextSetterAgent",
            description="Receives a fact and stores it in shared memory under a specific topic.",
            instructions=dedent(f'''\
                You are the ContextSetterAgent. Your primary task is to commit information to your memory.
                You will receive a `task_description` like: "Please remember the following fact and associate it with the topic '{SHARED_MEMORY_FACT_TOPIC}': '[fact_to_remember]'."
                Identify the '[fact_to_remember]' and the topic it needs to be associated with.
                You MUST use your internal memory capabilities to store this fact, associating it with the given topic (e.g., '{SHARED_MEMORY_FACT_TOPIC}').
                Specifically, you should use `self.memory.add_user_memory(memory=UserMemory(memory='[fact_to_remember]', topics=['{SHARED_MEMORY_FACT_TOPIC}']), user_id=self.user_id)`.
                Respond with a simple confirmation once you have stored the fact, for example: "I have remembered that [fact_to_remember] under topic '{SHARED_MEMORY_FACT_TOPIC}'."
            '''),
            model=agent_model,
            enable_agentic_memory=True,
            memory=shared_team_memory,
            add_history_to_messages=False,
            enable_user_memories=False,
            user_id=user_id, # Crucial for shared memory
            # No specific tools needed, uses self.memory directly
            debug_mode=True,
        )
        # --- End ContextSetterAgent ---

        # --- ContextReaderAgent ---
        context_reader_agent = Agent(
            agent_id=CONTEXT_READER_AGENT_ID,
            name="ContextReaderAgent",
            description="Reads a fact from shared memory associated with a specific topic and uses it.",
            instructions=dedent(f'''\
                You are the ContextReaderAgent. Your primary task is to recall a specific piece of information from your memory and use it.
                You will receive a `task_description` like: "Please recall the fact associated with the topic '{SHARED_MEMORY_FACT_TOPIC}' and then state: 'Based on shared context, I know that [recalled fact].'"
                You MUST use your internal memory capabilities to retrieve the fact associated with the given topic (e.g., '{SHARED_MEMORY_FACT_TOPIC}').
                Specifically, you should use `self.memory.get_user_memories(user_id=self.user_id, topics=['{SHARED_MEMORY_FACT_TOPIC}'])` and extract the memory content from the result.
                Once retrieved, your final output **MUST** be the sentence: 'Based on shared context, I know that [the recalled fact].'
                If no fact is found for the topic, output: 'I could not find any fact under topic {SHARED_MEMORY_FACT_TOPIC}.'
            '''),
            model=agent_model,
            add_history_to_messages=False,
            memory=shared_team_memory,
            enable_agentic_memory=True,
            enable_user_memories=False,
            user_id=user_id, # Crucial for shared memory
            # No specific tools needed, uses self.memory directly
            debug_mode=True,
        )
        # --- End ContextReaderAgent ---

        # Team specific tools for the Leader (Session state tools are kept for potential future use, but not core to this test)
        update_tool_instance = UpdateSessionStateTool()
        read_tool_instance = ReadSessionStateTool()

        update_session_state_tool_func = Function.from_callable(update_tool_instance.__call__)
        update_session_state_tool_func.name = update_tool_instance.name
        update_session_state_tool_func.description = update_tool_instance.description

        read_session_state_tool_func = Function.from_callable(read_tool_instance.__call__)
        read_session_state_tool_func.name = read_tool_instance.name
        read_session_state_tool_func.description = read_tool_instance.description

        team_level_tools = [
            update_session_state_tool_func,
            read_session_state_tool_func,
            # read_report_from_repository # Not used in this specific test
        ]

        super().__init__(
            team_id=team_id,
            name=name,
            instructions=MINIMAL_TEAM_LEADER_INSTRUCTIONS_CONTEXT_SHARING_TEST, # Use new instructions
            members=[context_setter_agent, context_reader_agent], # Use new agents
            model=team_leader_model,
            tools=team_level_tools,
            user_id=user_id,
            # memory=shared_team_memory, # Team can also have the shared memory
            storage=None, # For this minimal test, team-level storage might not be strictly needed if agents manage their own or it's handled by run
            session_state={'shared_fact_topic': SHARED_MEMORY_FACT_TOPIC}, # Example session state
            debug_mode=True,
            enable_team_history=False, # Enable to see the flow
            read_team_history=False, # Keep false to rely on explicit tasking
            # num_of_interactions_from_history=1, # Minimal history for leader
            **kwargs,
        )
        print(f"MinimalTestTeam '{name}' initialized. Testing context sharing between agents using shared memory.")

# The async main() and if __name__ == "__main__": block are removed.
# Instantiation will now be done in playground.py or other runner scripts.
# The dummy project creation is also removed, as it's not the responsibility of this module. 